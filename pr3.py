import serial
import time
import serial.tools.list_ports

# Определяем список возможных скоростей передачи данных для последовательного порта.
speeds = ['1200','2400', '4800', '9600', '19200', '38400', '57600', '115200']

# Получаем список доступных COM-портов в системе.
ports = [p.device for p in serial.tools.list_ports.comports()]

# Выбираем первый доступный COM-порт из списка.  Если список пуст, возникнет ошибка IndexError.
port_name = ports[0]

# Устанавливаем скорость передачи данных в последовательном порту.  В данном случае используется самая высокая скорость из списка `speeds`.
port_speed = int(speeds[-1])

# Устанавливаем время ожидания (timeout) для операций чтения из последовательного порта (в секундах).
port_timeout = 10

# Создаем объект serial.Serial для установления соединения с последовательным портом.
# port_name: Имя COM-порта (например, 'COM3' или '/dev/ttyUSB0').
# port_speed: Скорость передачи данных (бод).
# timeout: Время ожидания для операций чтения.
ard = serial.Serial(port_name, port_speed, timeout = port_timeout)

# Даем время для установления соединения с Arduino или другим устройством.
time.sleep(1)

# Очищаем буфер приема последовательного порта. Это делается для удаления любых данных, которые могли накопиться до начала работы скрипта.
ard.flushInput()

# Пытаемся прочитать данные из последовательного порта.
try:
    # Считываем все доступные байты из буфера приема последовательного порта.  ard.inWaiting() возвращает количество байтов, ожидающих чтения.
    msg_bin = ard.read(ard.inWaiting())
    msg_bin += ard.read(ard.inWaiting())
    msg_bin += ard.read(ard.inWaiting())
    msg_bin += ard.read(ard.inWaiting())

    # Декодируем полученные байты в строку, используя кодировку по умолчанию (обычно UTF-8).
    msg_str_ = msg_bin.decode()

    # Выводим длину полученного сообщения в байтах.
    print(len(msg_bin))

# Обрабатываем возможные исключения (ошибки), которые могут возникнуть во время чтения или декодирования данных.
except Exception as e:
    print('Error!')

# Закрываем соединение с последовательным портом.
ard.close()

# Пауза в 1 секунду.
time.sleep(1)

# Выводим полученную строку (или пустую строку, если произошла ошибка).
print(msg_str_)
